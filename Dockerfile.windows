# escape=`

ARG FLUENTBIT_VERSION=4.0.3
ARG WINDOWS_VERSION=2022 # Or '2022' if you want a newer base, check Docker Hub tags

#################################################
# Build New Relic Fluent Bit Output Plugin
#################################################

FROM mcr.microsoft.com/windows/servercore:$WINDOWS_VERSION AS nrBuilder

WORKDIR /build

USER ContainerAdministrator

ENV chocolateyVersion 1.4.0

# Install Chocolatey
RUN powershell.exe Invoke-WebRequest `
  -Uri https://chocolatey.org/install.ps1 `
  -OutFile C:\chocolatey-install.ps1
RUN powershell.exe `
  -ExecutionPolicy bypass `
  -InputFormat none `
  -NoProfile `
  C:\chocolatey-install.ps1
RUN setx PATH "%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"

# Install Base Dependencies
RUN choco install --yes --no-progress mingw git
# Install a compatible Go version. Note: The original Dockerfile used 1.23.6.
# Ensure this version is available via Chocolatey or adjust if necessary.
RUN choco install --yes --no-progress golang --version=1.23.6

# Put the path before the other paths so that MinGW shadows Windows commands.
RUN setx PATH "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw\bin;%PATH%"

# Compile the newrelic-fluent-bit-output plugin
COPY Makefile go.* *.go ./
COPY config/ ./config
COPY metrics/ ./metrics
COPY nrclient/ ./nrclient
COPY record/ ./record
COPY utils/ ./utils

ENV SOURCE docker

RUN setx CGO_ENABLED "1"
RUN setx GOOS "windows"
RUN setx GOARCH "amd64"
RUN setx CC "x86_64-w64-mingw32-gcc"
RUN setx CXX "x86_64-w64-mingw32-g++"

RUN go build -buildmode=c-shared -o out_newrelic.dll .


############################################################################################
# Use Official Fluent Bit Windows Image and include the newrelic-fluent-bit-output plugin
############################################################################################

# Use the official Fluent Bit Windows image
FROM fluent/fluent-bit:windows-${WINDOWS_VERSION}-${FLUENTBIT_VERSION} AS runtime

# Expose this env variable so that the version can be used in the helm chart
ENV FBVERSION=4.0.3
ARG IMAGE_CREATE_DATE
ARG IMAGE_SOURCE_REVISION

# Metadata as defined in OCI image spec annotations
# https://github.com/opencontainers/image-spec/blob/master/annotations.md
LABEL org.opencontainers.image.title="Fluent Bit" `
  org.opencontainers.image.description="Fluent Bit is an open source and multi-platform Log Processor and Forwarder which allows you to collect data/logs from different sources, unify and send them to multiple destinations. It's fully compatible with Docker and Kubernetes environments." `
  org.opencontainers.image.created=$IMAGE_CREATE_DATE `
  org.opencontainers.image.version=$FLUENTBIT_VERSION `
  org.opencontainers.image.authors="Eduardo Silva <eduardo@calyptia.com>" `
  org.opencontainers.image.url="https://hub.docker.com/r/fluent/fluent-bit" `
  org.opencontainers.image.documentation="https://docs.fluentbit.io/manual/" `
  org.opencontainers.image.vendor="Fluent Organization" `
  org.opencontainers.image.licenses="Apache-2.0" `
  org.opencontainers.image.source="https://github.com/fluent/fluent-bit" `
  org.opencontainers.image.revision=$IMAGE_SOURCE_REVISION

# Copy the compiled New Relic plugin from the builder stage
COPY --from=nrBuilder /build/out_newrelic.dll /fluent-bit/bin/out_newrelic.dll

# Copy your Fluent Bit configuration files
# The fluent/fluent-bit windows images typically have /fluent-bit/etc already set up.
# You might want to adjust the destination based on how the official image is structured.
COPY *.conf /fluent-bit/etc/

# Set the entrypoint and command as per your original Dockerfile for the plugin
ENTRYPOINT [ "/fluent-bit/bin/fluent-bit.exe" ]
CMD ["/fluent-bit/bin/fluent-bit.exe", "-c", "/fluent-bit/etc/fluent-bit.conf", "-e", "/fluent-bit/bin/out_newrelic.dll"]