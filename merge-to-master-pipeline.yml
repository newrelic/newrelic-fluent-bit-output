# Run any time a commit is merged to the 'master' branch
trigger:
- master

# There is a separate pipeline for PRs (it does not do deploys)
pr: none

pool:
  vmImage: 'ubuntu-16.04' # Has Docker

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- task: Bash@3
  displayName: 'Run tests'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(modulePath)'
    script: |
      go get -v -u github.com/jstemmer/go-junit-report
      go test -v 2>&1 | go-junit-report > test-results.xml

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(modulePath)/test-results.xml'
    failTaskOnFailedTests: true

- script: sudo apt install mingw-w64
  displayName: 'Get mingw'

- task: Bash@3
  inputs:
    targetType: 'inline'
    workingDirectory: '$(modulePath)'
    script: |
      VERSION=`cat version.go | grep VERSION | awk '{gsub(/"/, "", $4); print $4}'`
      echo "##vso[task.setvariable variable=VERSION]$VERSION"
  displayName: 'Get the current version into a variable'

- script: make all
  workingDirectory: '$(modulePath)'
  displayName: 'Build .so file'

- script: |
    env CGO_ENABLED=1 GOOS=windows GOARCH=386 CC=i686-w64-mingw32-gcc CXX=i686-w64-mingw32-g++ go build -buildmode=c-shared -o out_newrelic_win32.dll .
  workingDirectory: '$(modulePath)'
  displayName: 'Build Windows 32-bit DLL'

- script: |
    env CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ go build -buildmode=c-shared -o out_newrelic_win64.dll .
  workingDirectory: '$(modulePath)'
  displayName: 'Build Windows 64-bit DLL'

- task: Docker@2
  displayName: Login to Docker Hub
  inputs:
    command: login
    containerRegistry: DockerHub

- task: Docker@2
  displayName: Build and push Docker image to Docker Hub
  inputs:
    command: buildAndPush
    buildContext: '$(modulePath)'
    Dockerfile: '$(modulePath)/Dockerfile'
    repository: newrelic/newrelic-fluentbit-output
    tags: $(VERSION)

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_ngotim'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: '$(VERSION)'
    assets: |
      $(modulePath)/out_newrelic.so
      $(modulePath)/out_newrelic_win32.dll
      $(modulePath)/out_newrelic_win64.dll
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
